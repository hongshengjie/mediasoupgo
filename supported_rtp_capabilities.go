package mediasoupgo

import "mediasoupgo/internal/ptr"

var supportedRtpCapabilities = RtpCapabilities{
	Codecs: []*RtpCodecCapability{
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/opus",
			ClockRate: 48000,
			Channels:  ptr.To[byte](2),
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/multiopus",
			ClockRate: 48000,
			Channels:  ptr.To[byte](4),
			Parameters: map[string]any{
				"channel_mapping": "0,1,2,3",
				"num_streams":     2,
				"coupled_streams": 2,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/multiopus",
			ClockRate: 48000,
			Channels:  ptr.To[byte](6),
			Parameters: map[string]any{
				"channel_mapping": "0,4,1,2,3,5",
				"num_streams":     4,
				"coupled_streams": 2,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/multiopus",
			ClockRate: 48000,
			Channels:  ptr.To[byte](8),
			Parameters: map[string]any{
				"channel_mapping": "0,6,1,2,3,4,5,7",
				"num_streams":     5,
				"coupled_streams": 3,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/PCMU",
			PreferredPayloadType: ptr.To(byte(0)),
			ClockRate:            8000,
			RTCPFeedback:         []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/PCMA",
			PreferredPayloadType: ptr.To(byte(8)),
			ClockRate:            8000,
			RTCPFeedback:         []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/ISAC",
			ClockRate:    32000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/ISAC",
			ClockRate:    16000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/G722",
			PreferredPayloadType: ptr.To(byte(9)),
			ClockRate:            8000,
			RTCPFeedback:         []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/iLBC",
			ClockRate:    8000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/SILK",
			ClockRate:    24000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/SILK",
			ClockRate:    16000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/SILK",
			ClockRate:    12000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:         AudioMediaKind,
			MimeType:     "audio/SILK",
			ClockRate:    8000,
			RTCPFeedback: []*RtcpFeedback{{Type: "transport-cc"}},
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/CN",
			PreferredPayloadType: ptr.To(byte(13)),
			ClockRate:            32000,
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/CN",
			PreferredPayloadType: ptr.To(byte(13)),
			ClockRate:            16000,
		},
		{
			Kind:                 AudioMediaKind,
			MimeType:             "audio/CN",
			PreferredPayloadType: ptr.To(byte(13)),
			ClockRate:            8000,
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/telephone-event",
			ClockRate: 48000,
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/telephone-event",
			ClockRate: 32000,
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/telephone-event",
			ClockRate: 16000,
		},
		{
			Kind:      AudioMediaKind,
			MimeType:  "audio/telephone-event",
			ClockRate: 8000,
		},
		{
			Kind:      VideoMediaKind,
			MimeType:  "video/VP8",
			ClockRate: 90000,
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "nack", Parameter: ptr.To("pli")},
				{Type: "ccm", Parameter: ptr.To("fir")},
				{Type: "goog-remb"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      VideoMediaKind,
			MimeType:  "video/VP9",
			ClockRate: 90000,
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "nack", Parameter: ptr.To("pli")},
				{Type: "ccm", Parameter: ptr.To("fir")},
				{Type: "goog-remb"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      VideoMediaKind,
			MimeType:  "video/H264",
			ClockRate: 90000,
			Parameters: map[string]any{
				"level-asymmetry-allowed": 1,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "nack", Parameter: ptr.To("pli")},
				{Type: "ccm", Parameter: ptr.To("fir")},
				{Type: "goog-remb"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      VideoMediaKind,
			MimeType:  "video/H264-SVC",
			ClockRate: 90000,
			Parameters: map[string]any{
				"level-asymmetry-allowed": 1,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "nack", Parameter: ptr.To("pli")},
				{Type: "ccm", Parameter: ptr.To("fir")},
				{Type: "goog-remb"},
				{Type: "transport-cc"},
			},
		},
		{
			Kind:      VideoMediaKind,
			MimeType:  "video/H265",
			ClockRate: 90000,
			Parameters: map[string]any{
				"level-asymmetry-allowed": 1,
			},
			RTCPFeedback: []*RtcpFeedback{
				{Type: "nack"},
				{Type: "nack", Parameter: ptr.To("pli")},
				{Type: "ccm", Parameter: ptr.To("fir")},
				{Type: "goog-remb"},
				{Type: "transport-cc"},
			},
		},
	},
	HeaderExtensions: []*RtpHeaderExtension{
		{
			Kind:             AudioMediaKind,
			URI:              MIDRtpHeaderExtensionUri,
			PreferredID:      1,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              MIDRtpHeaderExtensionUri,
			PreferredID:      1,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              RTPStreamIDRtpHeaderExtensionUri,
			PreferredID:      2,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(RecvOnlyRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              RepairedRTPStreamIDRtpHeaderExtensionUri,
			PreferredID:      3,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(RecvOnlyRtpHeaderExtensionDirection),
		},
		{
			Kind:             AudioMediaKind,
			URI:              AbsSendTimeRtpHeaderExtensionUri,
			PreferredID:      4,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              AbsSendTimeRtpHeaderExtensionUri,
			PreferredID:      4,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             AudioMediaKind,
			URI:              TransportWideCC01RtpHeaderExtensionUri,
			PreferredID:      5,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(RecvOnlyRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              TransportWideCC01RtpHeaderExtensionUri,
			PreferredID:      5,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              FrameMarking07RtpHeaderExtensionUri,
			PreferredID:      6,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              FrameMarkingRtpHeaderExtensionUri,
			PreferredID:      7,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             AudioMediaKind,
			URI:              SSRCAudioLevelRtpHeaderExtensionUri,
			PreferredID:      10,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              VideoOrientationRtpHeaderExtensionUri,
			PreferredID:      11,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              ToffsetRtpHeaderExtensionUri,
			PreferredID:      12,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             AudioMediaKind,
			URI:              AbsCaptureTimeRtpHeaderExtensionUri,
			PreferredID:      13,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              AbsCaptureTimeRtpHeaderExtensionUri,
			PreferredID:      13,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             AudioMediaKind,
			URI:              PlayoutDelayRtpHeaderExtensionUri,
			PreferredID:      14,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
		{
			Kind:             VideoMediaKind,
			URI:              PlayoutDelayRtpHeaderExtensionUri,
			PreferredID:      14,
			PreferredEncrypt: ptr.To(false),
			Direction:        ptr.To(SendRecvRtpHeaderExtensionDirection),
		},
	},
}
